import os
import sys
import logging
import requests
import time
from datetime import datetime
from typing import List, Dict, Any
from bs4 import BeautifulSoup
from google_sheets_service_account import GoogleSheetsServiceAccount
from links.links_doc import urls_prod, urls_stage
from config import SPREADSHEET_ID
from telegram_bot import TelegramBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
# –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–º—É —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç—É –∏ ID —Ç–∞–±–ª–∏—Ü—ã
SERVICE_ACCOUNT_FILE = 'service-account-key.json'
# SPREADSHEET_ID = '1afbfvzPn-SMPkTqPI6nmHv32mcQ3MTG0zu0DPBhCYm8'
SHEET_NAME = '–ü–û–õ'  # –ò–º—è –ª–∏—Å—Ç–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤


# ====== –§–£–ù–ö–¶–ò–ò ======
def analyze_url(url: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ h1-h6"""
    result = {
        'url': url,
        'status': 'error',
        'error': None,
        'headings': {},
    }
    try:
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')
        headings = {}
        for i in range(1, 7):
            tag = f'h{i}'
            elements = soup.find_all(tag)
            total = len(elements)
            non_empty = len([el for el in elements if el.get_text(strip=True)])
            headings[f'{tag}_total'] = total
            headings[f'{tag}_non_empty'] = non_empty
        headings['total_headings'] = sum(headings[f'h{i}_non_empty'] for i in range(1, 7))
        result['status'] = 'success'
        result['headings'] = headings
    except Exception as e:
        result['error'] = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {url}: {e}")
    return result


def compare_headings(prod: Dict[str, Any], stage: Dict[str, Any]) -> Dict[str, Any]:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –º–µ–∂–¥—É –ø—Ä–æ–¥ –∏ —Å—Ç–µ–π–¥–∂"""
    comparison = {}
    for i in range(1, 7):
        tag = f'h{i}_non_empty'
        prod_val = prod['headings'].get(tag, 0)
        stage_val = stage['headings'].get(tag, 0)
        comparison[tag] = {'prod': prod_val, 'stage': stage_val, 'diff': stage_val - prod_val}
    comparison['total_headings'] = {
        'prod': prod['headings'].get('total_headings', 0),
        'stage': stage['headings'].get('total_headings', 0),
        'diff': stage['headings'].get('total_headings', 0) - prod['headings'].get('total_headings', 0)
    }
    return comparison


def save_to_google_sheets(results: List[Dict[str, Any]]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Google Sheets"""
    sheets = GoogleSheetsServiceAccount(SERVICE_ACCOUNT_FILE)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
    header = [
        '–î–∞—Ç–∞',
        'Prod URL', 'Stage URL',
        'Prod H1', 'Prod H2', 'Prod H3', 'Prod H4', 'Prod H5', 'Prod H6', 'Prod Total', 'Prod Total All',
        'Stage H1', 'Stage H2', 'Stage H3', 'Stage H4', 'Stage H5', 'Stage H6', 'Stage Total', 'Stage Total All',
        'H1 diff', 'H2 diff', 'H3 diff', 'H4 diff', 'H5 diff', 'H6 diff', 'Total diff',
        'Prod error', 'Stage error'
    ]
    rows = [header]
    for item in results:
        row = [
            item['date'],
            item['prod_url'],
            item['stage_url'],
            item['prod_h1'],
            item['prod_h2'],
            item['prod_h3'],
            item['prod_h4'],
            item['prod_h5'],
            item['prod_h6'],
            item['prod_total'],
            item['prod_total_all'],
            item['stage_h1'],
            item['stage_h2'],
            item['stage_h3'],
            item['stage_h4'],
            item['stage_h5'],
            item['stage_h6'],
            item['stage_total'],
            item['stage_total_all'],
            item['h1_diff'],
            item['h2_diff'],
            item['h3_diff'],
            item['h4_diff'],
            item['h5_diff'],
            item['h6_diff'],
            item['total_diff'],
            item['prod_error'],
            item['stage_error'],
        ]
        rows.append(row)
    range_name = f"{SHEET_NAME}!A1"
    sheets.update_sheet(SPREADSHEET_ID, range_name, rows)
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets (–ª–∏—Å—Ç {SHEET_NAME})")


def send_telegram_report(results: List[Dict[str, Any]]):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –≤ Telegram"""
    bot = TelegramBot()
    if not bot.bot_token or not bot.chat_id:
        logger.warning('–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Telegram –±–æ—Ç (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ chat_id)')
        return
    total = len(results)
    errors = [r for r in results if r['prod_error'] or r['stage_error']]
    diffs = [r for r in results if any(r[f'h{i}_diff'] != 0 for i in range(1, 7)) or r['total_diff'] != 0]
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    msg = f"<b>üåê –ü–û–õ –°–ï–û –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü</b>\n<i>{timestamp}</i>\n\n"
    msg += f"üìÑ –í—Å–µ–≥–æ –ø–∞—Ä: <b>{total}</b>\n"
    msg += f"‚ùå –û—à–∏–±–æ–∫: <b>{len(errors)}</b>\n"
    msg += f"üìä –ü–∞—Ä —Å —Ä–∞–∑–Ω–∏—Ü–µ–π: <b>{len(diffs)}</b>\n"
    if errors:
        msg += f"\n<b>–û—à–∏–±–∫–∏:</b>"
        for r in errors[:10]:
            msg += f"\n- <a href='{r['prod_url']}'>Prod</a> / <a href='{r['stage_url']}'>Stage</a>"
            if r['prod_error']:
                msg += f"\n  Prod error: {r['prod_error']}"
            if r['stage_error']:
                msg += f"\n  Stage error: {r['stage_error']}"
        if len(errors) > 10:
            msg += f"\n...–µ—â—ë {len(errors)-10} –æ—à–∏–±–æ–∫"
    if diffs:
        msg += f"\n\n<b>–†–∞–∑–ª–∏—á–∏—è –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º:</b>"
        for r in diffs[:10]:
            msg += f"\n- <a href='{r['prod_url']}'>Prod</a> / <a href='{r['stage_url']}'>Stage</a>"
            for i in range(1, 7):
                diff = r[f'h{i}_diff']
                if diff != 0:
                    msg += f"\n  H{i} diff: {diff}"
            if r['total_diff'] != 0:
                msg += f"\n  Total diff: {r['total_diff']}"
        if len(diffs) > 10:
            msg += f"\n...–µ—â—ë {len(diffs)-10} —Å —Ä–∞–∑–Ω–∏—Ü–µ–π"
    msg += "\n\n<i>ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>"
    bot.send_message(msg)


def main():
    if len(urls_prod) != len(urls_stage):
        logger.error('–°–ø–∏—Å–∫–∏ urls_prod –∏ urls_stage –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã!')
        sys.exit(1)
    results = []
    for prod_url, stage_url in zip(urls_prod, urls_stage):
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é –ø–∞—Ä—É:\n  PROD: {prod_url}\n  STAGE: {stage_url}")
        prod_result = analyze_url(prod_url)
        stage_result = analyze_url(stage_url)
        comparison = compare_headings(prod_result, stage_result)
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        results.append({
            'date': now,
            'prod_url': prod_url,
            'stage_url': stage_url,
            'prod_h1': prod_result['headings'].get('h1_non_empty', 0),
            'prod_h2': prod_result['headings'].get('h2_non_empty', 0),
            'prod_h3': prod_result['headings'].get('h3_non_empty', 0),
            'prod_h4': prod_result['headings'].get('h4_non_empty', 0),
            'prod_h5': prod_result['headings'].get('h5_non_empty', 0),
            'prod_h6': prod_result['headings'].get('h6_non_empty', 0),
            'prod_total': prod_result['headings'].get('total_headings', 0),
            'prod_total_all': sum(prod_result['headings'].get(f'h{i}_total', 0) for i in range(1, 7)),
            'stage_h1': stage_result['headings'].get('h1_non_empty', 0),
            'stage_h2': stage_result['headings'].get('h2_non_empty', 0),
            'stage_h3': stage_result['headings'].get('h3_non_empty', 0),
            'stage_h4': stage_result['headings'].get('h4_non_empty', 0),
            'stage_h5': stage_result['headings'].get('h5_non_empty', 0),
            'stage_h6': stage_result['headings'].get('h6_non_empty', 0),
            'stage_total': stage_result['headings'].get('total_headings', 0),
            'stage_total_all': sum(stage_result['headings'].get(f'h{i}_total', 0) for i in range(1, 7)),
            'h1_diff': comparison['h1_non_empty']['diff'],
            'h2_diff': comparison['h2_non_empty']['diff'],
            'h3_diff': comparison['h3_non_empty']['diff'],
            'h4_diff': comparison['h4_non_empty']['diff'],
            'h5_diff': comparison['h5_non_empty']['diff'],
            'h6_diff': comparison['h6_non_empty']['diff'],
            'total_diff': comparison['total_headings']['diff'],
            'prod_error': prod_result['error'],
            'stage_error': stage_result['error'],
        })
        time.sleep(1)  # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∑–∞–ø—Ä–æ—Å–∞–º–∏
    save_to_google_sheets(results)
    send_telegram_report(results)
    print('–ì–æ—Ç–æ–≤–æ!')


if __name__ == '__main__':
    main() 